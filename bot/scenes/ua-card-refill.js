const { Scenes, Markup } = require('telegraf');
const payments = require('../../models/payments');
const sendMenu = require('../menu');
const path = require('path');
const moment = require('moment');

const uaCardRefill = new Scenes.BaseScene('ua-card-refill');

uaCardRefill.enterHandler = async ctx => {
  try {
    const raw = /:(?<paymentId>\d+)$/.exec(ctx.callbackQuery.data);
    if (!raw) {
      ctx.answerCbQuery('ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω').catch(() => null);
      throw new Error('No data found');
    }

    const { paymentId } = raw.groups;
    const paymentID = Number(paymentId);
    const payment = await payments.findOne({
      paymentID,
      status: 'waiting'
    });
    if (!payment) {
      ctx
        .reply('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω')
        .then(msg =>
          setTimeout(
            () => ctx.deleteMessage(msg.message_id).catch(() => null),
            2500
          )
        )
        .catch(() => null);
      throw new Error('Payment not found');
    }

    ctx.scene.state.payment = payment;

    await ctx.sendPhoto(
      {
        source: path.resolve('files', 'images', 'blank_shop.jpg')
      },
      {
        caption:
          '–≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã üí≥\n\n–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤—ã–ø—É—â–µ–Ω–Ω–æ–π –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –£–∫—Ä–∞–∏–Ω—ã üá∫üá¶',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('–î–∞', 'agreed')],
          [Markup.button.callback('–ù–∞–∑–∞–¥', 'exit')]
        ]).reply_markup
      }
    );
  } catch (error) {
    console.log(error);
    ctx.scene.leave();
  }
};

uaCardRefill.action('agreed', async ctx => {
  try {
    const { payment } = ctx.scene.state;
    const uahAmount = Math.ceil(payment.amount / global.rubToUah);
    ctx.scene.state.uahAmount = uahAmount;

    await payments.updateOne(
      {
        paymentID: payment.paymentID
      },
      {
        $set: {
          uahAmount
        }
      }
    );

    await ctx.editMessageCaption(
      `–°—á–µ—Ç <code>${payment.paymentID}</code> –Ω–∞ ${payment.amount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω / –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 ‚Ç¥ = ${global.rubToUah} ‚ÇΩ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ${uahAmount} ‚Ç¥ –Ω–∞ –∫–∞—Ä—Ç—É <code>${global.uaRefillCard}</code>\n\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –∏–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω\n\n–¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏–ª</b>\n\n<b>‚ö†Ô∏è –ù–∞–∂–∏–º–∞—Ç—å —Å—Ç—Ä–æ–≥–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>`,
      {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('–û–ø–ª–∞—Ç–∏–ª', 'paid')],
          [Markup.button.callback('–ù–∞–∑–∞–¥', 'exit')]
        ]).reply_markup
      }
    );
  } catch (error) {
    console.log(error);
    ctx.scene.leave();
  }
});

uaCardRefill.action('paid', async ctx => {
  try {
    ctx.scene.state.target = 'screenshot';
    await ctx.editMessageCaption(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∏–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );
  } catch (error) {
    console.log(error);
  }
});

uaCardRefill.on('photo', async ctx => {
  try {
    const { payment, uahAmount, target } = ctx.scene.state;
    if (target !== 'screenshot' || !ctx.message?.photo) {
      return;
    }

    const image = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    ctx.telegram
      .sendPhoto(global.cardWorkerID, image, {
        caption: `–°—á–µ—Ç <code>${
          payment.paymentID
        }</code> (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://id?user=${ctx.from.id}">${
          ctx.from.id
        }</a>) –Ω–∞ ${payment.amount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω ${moment(
          new Date()
        ).format(
          'DD.MM.YYYY [–≤] HH:mm'
        )}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É ${uahAmount} ‚Ç¥`,
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback(
              '–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã',
              `approve-ua-card-payment:${payment.paymentID}`
            )
          ],
          [
            Markup.button.callback(
              '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª',
              `decline-ua-card-payment:${payment.paymentID}`
            )
          ]
        ]).reply_markup
      })
      .catch(e => console.log(e));

    await ctx.reply(
      '–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n‚úîÔ∏è –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å'
    );

    await sendMenu(ctx);
    ctx.scene.leave();
  } catch (error) {
    console.log(error);
  }
});

uaCardRefill.action('exit', ctx => ctx.scene.enter('shop'));

module.exports = uaCardRefill;
